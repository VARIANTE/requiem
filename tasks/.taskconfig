/**
 * Requiem
 * (c) VARIANTE (http://variante.io)
 *
 * Configuration for Gulp tasks.
 *
 * This software is released under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 */

import path from 'path';
import webpack from 'webpack';
import $util from 'gulp-util';

let env = {
  port: $util.env['port'] || $util.env['p'],
  serve: $util.env['serve'] || $util.env['s'],
  watch: $util.env['watch'] || $util.env['w']
};

let paths = {
  base: path.join(__dirname, '../'),
  src: path.join(__dirname, '../', 'src'),
  dist: path.join(__dirname, '../', 'dist'),
  play: path.join(__dirname, '../', 'playground'),
  docs: path.join(__dirname, '../', 'docs'),
  modules: path.join(__dirname, '../', 'node_modules')
};

let tasks = {
  build: {
    clean: {
      input: paths.dist
    },
    webpack: {
      pretty: {
        context: paths.src,
        devtool: 'sourcemap',
        entry: {
          requiem: './requiem.js'
        },
        output: {
          path: paths.dist,
          filename: 'requiem.js',
          library: 'requiem',
          libraryTarget: 'umd'
        },
        module: {
          loaders: [{
            test:  paths.src,
            loader: 'babel',
            query: {
              presets: ['es2015']
            }
          }]
        }
      },
      ugly: {
        context: paths.src,
        entry: {
          requiem: './requiem.js'
        },
        output: {
          path: paths.dist,
          filename: 'requiem.min.js',
          library: 'requiem',
          libraryTarget: 'umd'
        },
        module: {
          loaders: [{
            test:  paths.src,
            loader: 'babel',
            query: {
              presets: ['es2015']
            }
          }]
        },
        plugins: [
          new webpack.optimize.UglifyJsPlugin()
        ]
      }
    }
  },
  docs: {
    clean: paths.docs,
    input: paths.src,
    readme: path.join(paths.base, 'README.md'),
    config: path.join(paths.base, '.docconfig')
  },
  play: {
    clean: {
      input: path.join(paths.play, 'build')
    },
    styles: {
      input: path.join(paths.play, 'src', 'stylesheets', '*.scss'),
      output: path.join(paths.play, 'build', 'stylesheets'),
      sass: {
        outputStyle: 'nested',
        includePaths: [path.join(paths.dist, 'sass'), paths.modules]
      }
    },
    scripts: {
      webpack: {
        cache: true,
        context: path.join(paths.play, 'src', 'javascripts'),
        debug: true,
        devtool: 'sourcemap',
        entry: {
          main: './main.js'
        },
        output: {
          path: path.join(paths.play, 'build', 'javascripts'),
          publicPath: 'javascripts/',
          filename: '[name].js',
          chunkFilename: '[chunkhash].js',
          sourceMapFilename: '[file].map'
        },
        module: {
          loaders: [{
            test: path.join(paths.play, 'src', 'javascripts'),
            loader: 'babel',
            query: {
              presets: ['es2015']
            }
          }]
        },
        resolve: {
          root: [path.join(paths.dist)],
          extensions: ['', '.js', '.json']
        }
      }
    },
    templates: {
      input: path.join(paths.play, 'src', 'templates', 'views', '**', '*.jade'),
      output: path.join(paths.play, 'build'),
      jade: {
        pretty: true
      }
    },
    serve: {
      browserSync: {
        server: {
          baseDir: path.join(paths.play, 'build')
        },
        files: [path.join(paths.play, 'build')],
        browser: 'google chrome',
        notify: false,
        port: (typeof port === 'number') ? env.port : 9000
      }
    }
  },
  watch: {
    build: [{
        files: path.join(paths.src, '**', '*.js'),
        tasks: [
          'build'
        ]
      }
    ],
    play: [{
      files: [
        path.join(paths.play, 'src', '**', '*.scss'),
        path.join(paths.dist, '**', '*.scss')
      ],
      tasks: ['styles:play']
    }, {
      files: path.join(paths.play, 'src', '**', '*.jade'),
      tasks: ['templates:play']
    }]
  }
};

export default {
  env: env,
  paths: paths,
  tasks: tasks
};
